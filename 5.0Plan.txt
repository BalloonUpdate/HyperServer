亿个想法：

通用：
diff 文件假定为 json：
存放与上个版本比较的 增、删、改 变动，由客户端读取并作出操作，服务端写入相应内容。
diff 文件存放在各个更新包内。

index 假定为 json：
index 用于存放服务端的最新版本号。

full_index 假定为 json：
full_index 用于存放服务端现有的所有版本号。

full_package 假定为 zip：
（可选项）当客户端无法正确失败版本时，会向服务端获取 full_package。

更新包：
根目录存放 diff 文件，存放一个 res 文件夹。
res 文件夹：
存放新文件和覆盖文件。
由服务端构建，客户端解析。

服务端：
服务端三个文件夹：其中两个文件夹里面存放客户端文件，另外一个存放各个版本的更新包。

客户端文件夹：一个存放新版客户端，一个存放旧版客户端。
当用户对客户端文件夹做出变动并进行更新时，服务端开始和旧文件夹比较差异，然后将不同部分写入到 diff 文件内，然后把新增和修改的文件打包进更新包中。
打包完成后，自动将版本号递增：例如当前版本为 9, 则打包完成后自动修改为 10。

客户端：
客户端版本号文件存放在一个单独的文件中。
客户端向服务端获取 index 并与客户端版本号文件对比：
例如客户端版本为 7，服务端版本为 11，则客户端以多线程方式向服务端获取 8, 9, 10, 11 版本号的更新包，并且可以在下载的同时按照顺序安装更新包。
下载完成后，进行更新包验证，然后开始安装更新包。
每次安装完一个更新包后，客户端都会更新一次客户端版本号文件，防止用户误退出程序。

更新包验证：
如果验证成功则继续下一步操作，验证失败则重试 N 次，N 次后向用户抛出错误。
*只要有任何一个更新包不正确，就不能继续下一步的安装。
